# GitHub Actions 自动化测试工作流

name: 🧪 自动化测试套件

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行一次
    - cron: '0 2 * * *'

jobs:
  # 单元测试
  unit-tests:
    name: 📝 单元测试
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 安装依赖
        run: npm ci
        
      - name: 运行单元测试
        run: npm run test -- --coverage --watchAll=false
        
      - name: 上传覆盖率报告到 Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: unit-tests
          fail_ci_if_error: false

  # E2E测试
  e2e-tests:
    name: 🎭 端到端测试
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 安装依赖
        run: npm ci
        
      - name: 安装 Playwright 浏览器
        run: npx playwright install --with-deps
        
      - name: 构建项目
        run: npm run build
        
      - name: 运行 E2E 测试
        run: npm run test:e2e
        
      - name: 上传 Playwright 报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # 性能测试
  lighthouse-tests:
    name: 🚀 Lighthouse 性能测试
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 安装依赖
        run: |
          npm ci
          npm install -g @lhci/cli@0.12.x
          
      - name: 构建项目
        run: npm run build
        
      - name: 运行 Lighthouse CI
        run: |
          npm run test:lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: 上传 Lighthouse 报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: .lighthouseci/
          retention-days: 7

  # 代码质量检查
  code-quality:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 安装依赖
        run: npm ci
        
      - name: TypeScript 类型检查
        run: npx tsc --noEmit
        
      - name: ESLint 检查 (如果配置了)
        run: |
          if [ -f ".eslintrc.*" ]; then
            npm run lint || echo "ESLint 配置未找到，跳过检查"
          else
            echo "未配置 ESLint，跳过检查"
          fi
        continue-on-error: true

  # 安全扫描
  security-scan:
    name: 🔒 安全扫描
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 安装依赖
        run: npm ci
        
      - name: npm 审计
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: 检查已知漏洞
        run: |
          if command -v snyk &> /dev/null; then
            snyk test || echo "Snyk 未配置，跳过检查"
          else
            echo "未安装 Snyk，跳过检查"
          fi
        continue-on-error: true

  # 构建测试
  build-test:
    name: 🏗️ 构建测试
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 安装依赖
        run: npm ci
        
      - name: 构建项目
        run: npm run build
        
      - name: 检查构建文件
        run: |
          if [ -d "dist" ]; then
            echo "构建成功，输出文件："
            ls -la dist/
          else
            echo "构建失败：dist 目录未生成"
            exit 1
          fi

  # 测试报告汇总
  test-summary:
    name: 📊 测试结果汇总
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, lighthouse-tests, code-quality, security-scan, build-test]
    if: always()
    
    steps:
      - name: 下载所有测试报告
        uses: actions/download-artifact@v4
        
      - name: 生成测试摘要
        run: |
          echo "## 🧪 测试执行摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📝 单元测试" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 失败" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🎭 E2E 测试" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 失败" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🚀 性能测试" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.lighthouse-tests.result }}" == "success" ]; then
            echo "✅ 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 失败" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔍 代码质量" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 失败" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔒 安全扫描" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ 有警告" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🏗️ 构建测试" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-test.result }}" == "success" ]; then
            echo "✅ 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 失败" >> $GITHUB_STEP_SUMMARY
          fi